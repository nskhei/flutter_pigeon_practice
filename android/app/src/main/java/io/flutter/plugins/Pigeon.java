// Autogenerated from Pigeon (v0.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AddReply {
    private Long result;
    public Long getResult() { return result; }
    public void setResult(Long setterArg) { this.result = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("result", result);
      return toMapResult;
    }
    static AddReply fromMap(HashMap map) {
      AddReply fromMapResult = new AddReply();
      Object result = map.get("result");
      fromMapResult.result = (result == null) ? null : ((result instanceof Integer) ? (Integer)result : (Long)result);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AddRequest {
    private Long n1;
    public Long getN1() { return n1; }
    public void setN1(Long setterArg) { this.n1 = setterArg; }

    private Long n2;
    public Long getN2() { return n2; }
    public void setN2(Long setterArg) { this.n2 = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("n1", n1);
      toMapResult.put("n2", n2);
      return toMapResult;
    }
    static AddRequest fromMap(HashMap map) {
      AddRequest fromMapResult = new AddRequest();
      Object n1 = map.get("n1");
      fromMapResult.n1 = (n1 == null) ? null : ((n1 instanceof Integer) ? (Integer)n1 : (Long)n1);
      Object n2 = map.get("n2");
      fromMapResult.n2 = (n2 == null) ? null : ((n2 instanceof Integer) ? (Integer)n2 : (Long)n2);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api {
    AddReply add(AddRequest arg);

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.add", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              AddRequest input = AddRequest.fromMap((HashMap)message);
              AddReply output = api.add(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
